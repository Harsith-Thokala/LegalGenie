"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Copy, Download, Loader2, FileText, Shield, Sparkles, Clock, File } from "lucide-react"
import { useDocuments } from "@/lib/document-context"
import { useRouter } from "next/navigation"
import { useAuth } from "@/lib/auth-context"

export default function LegalGenie() {
  const [prompt, setPrompt] = useState("")
  const [isGenerating, setIsGenerating] = useState(false)
  const [generatedDocument, setGeneratedDocument] = useState("")
  const [showCopiedTooltip, setShowCopiedTooltip] = useState(false)
  const { addDocument } = useDocuments()
  const router = useRouter()
  const { user } = useAuth()

  const handleGenerate = async () => {
    if (!prompt.trim()) return

    // Check if user is authenticated
    if (!user) {
      alert('Please sign in to generate documents')
      router.push('/login')
      return
    }

    setIsGenerating(true)

    try {
      // Call real API route with authenticated user
      const response = await fetch('/api/generate/document', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          prompt: prompt.trim(),
          userId: user.id,
          // folderId: currentFolderId (for future folder organization)
        })
      })

      const data = await response.json()

      if (!response.ok) {
        console.error('API Error Response:', data)
        
        // Handle specific quota errors
        if (data.details && data.details.includes('quota')) {
          throw new Error('Rate limit exceeded. Please wait a moment and try again.')
        }
        
        throw new Error(data.details || data.error || 'Failed to generate document')
      }

      const generatedContent = data.document.content

      setGeneratedDocument(generatedContent)
      
      // Add to local state for immediate UI feedback
      const documentId = addDocument({
        title: data.document.title,
        type: data.document.type,
        content: generatedContent,
        prompt: prompt,
        status: "completed",
        isFavorite: false,
        tags: data.document.tags || [],
      })
      
      setIsGenerating(false)
    } catch (error) {
      console.error('Error generating document:', error)
      console.error('Full error details:', JSON.stringify(error, null, 2))
      setIsGenerating(false)
      
      // Show more user-friendly error messages
      const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred'
      alert(`Error: ${errorMessage}`)
      
      // Log for debugging
      console.error('Full error object:', error)
    }
  }

  const handleCopyToClipboard = async () => {
    try {
      await navigator.clipboard.writeText(generatedDocument)
      setShowCopiedTooltip(true)
      setTimeout(() => setShowCopiedTooltip(false), 1500)
    } catch (err) {
      console.error("Failed to copy text: ", err)
    }
  }

  const handleDownloadPDF = async () => {
    try {
      // Dynamic import to avoid SSR issues
      const jsPDF = (await import("jspdf")).default

      const doc = new jsPDF()
      const pageWidth = doc.internal.pageSize.getWidth()
      const pageHeight = doc.internal.pageSize.getHeight()
      const margin = 20
      const maxWidth = pageWidth - 2 * margin

      // Add title
      doc.setFontSize(16)
      doc.setFont(undefined, "bold")
      doc.text("Legal Document", margin, margin + 10)

      // Add generation date
      doc.setFontSize(10)
      doc.setFont(undefined, "normal")
      doc.text(`Generated on: ${new Date().toLocaleDateString()}`, margin, margin + 25)

      // Add document content
      doc.setFontSize(11)
      const lines = doc.splitTextToSize(generatedDocument, maxWidth)
      let yPosition = margin + 40

      lines.forEach((line: string) => {
        if (yPosition > pageHeight - margin) {
          doc.addPage()
          yPosition = margin
        }
        doc.text(line, margin, yPosition)
        yPosition += 6
      })

      // Add footer
      const totalPages = doc.getNumberOfPages()
      for (let i = 1; i <= totalPages; i++) {
        doc.setPage(i)
        doc.setFontSize(8)
        doc.text(`Generated by LegalGenie AI - Page ${i} of ${totalPages}`, margin, pageHeight - 10)
      }

      doc.save("legal-document.pdf")
    } catch (error) {
      console.error("Error generating PDF:", error)
      // Fallback to text download
      handleDownloadDocx()
    }
  }

  const handleDownloadDocx = () => {
    try {
      // Create a simple text file download (in production, you'd use a library like docx)
      const blob = new Blob([generatedDocument], { type: "text/plain;charset=utf-8" })
      const url = URL.createObjectURL(blob)
      const a = window.document.createElement("a")
      a.href = url
      a.download = "legal-document.txt"
      window.document.body.appendChild(a)
      a.click()
      window.document.body.removeChild(a)
      URL.revokeObjectURL(url)
    } catch (error) {
      console.error('Error downloading document:', error)
      alert('Failed to download document')
    }
  }

  const handleCopySection = async (sectionText: string) => {
    try {
      await navigator.clipboard.writeText(sectionText)
      setShowCopiedTooltip(true)
      setTimeout(() => setShowCopiedTooltip(false), 1500)
    } catch (err) {
      console.error("Failed to copy section: ", err)
    }
  }

  const handleSaveAndView = () => {
    router.push("/documents")
  }

  return (
    <div className="container mx-auto px-4 py-8 max-w-6xl">
      <div className="text-center mb-12">
        <div className="flex items-center justify-center mb-6">
          <div className="flex items-center justify-center w-16 h-16 bg-gradient-to-br from-primary to-accent rounded-xl shadow-lg">
            <Sparkles className="w-8 h-8 text-primary-foreground" />
          </div>
        </div>
        <h1 className="font-serif text-5xl font-bold text-foreground mb-4">Generate Legal Documents with AI</h1>
        <p className="text-xl text-muted-foreground max-w-2xl mx-auto leading-relaxed">
          Create professional, legally compliant documents in minutes. Powered by advanced AI technology.
        </p>
      </div>

      <div className="grid md:grid-cols-3 gap-8 mb-12">
        <Card className="text-center p-6 border-border hover:shadow-lg transition-shadow">
          <CardContent className="pt-6">
            <div className="flex items-center justify-center w-12 h-12 bg-primary/10 rounded-lg mx-auto mb-4">
              <FileText className="w-6 h-6 text-primary" />
            </div>
            <h3 className="font-serif font-semibold text-foreground mb-2">Professional Documents</h3>
            <p className="text-muted-foreground text-sm">
              Generate legally sound documents tailored to your specific needs and requirements
            </p>
          </CardContent>
        </Card>

        <Card className="text-center p-6 border-border hover:shadow-lg transition-shadow">
          <CardContent className="pt-6">
            <div className="flex items-center justify-center w-12 h-12 bg-accent/10 rounded-lg mx-auto mb-4">
              <Clock className="w-6 h-6 text-accent" />
            </div>
            <h3 className="font-serif font-semibold text-foreground mb-2">Save Time</h3>
            <p className="text-muted-foreground text-sm">
              Create complex legal documents in minutes instead of hours with AI assistance
            </p>
          </CardContent>
        </Card>

        <Card className="text-center p-6 border-border hover:shadow-lg transition-shadow">
          <CardContent className="pt-6">
            <div className="flex items-center justify-center w-12 h-12 bg-primary/10 rounded-lg mx-auto mb-4">
              <Shield className="w-6 h-6 text-primary" />
            </div>
            <h3 className="font-serif font-semibold text-foreground mb-2">Legally Compliant</h3>
            <p className="text-muted-foreground text-sm">
              Documents follow current legal standards and industry best practices
            </p>
          </CardContent>
        </Card>
      </div>

      <Card className="mb-8 shadow-lg border-border">
        <CardHeader className="pb-4">
          <CardTitle className="font-serif text-2xl text-foreground">Describe Your Legal Document</CardTitle>
          <p className="text-muted-foreground">
            Provide detailed information about the legal document you need to generate
          </p>
        </CardHeader>
        <CardContent>
          <textarea
            value={prompt}
            onChange={(e) => setPrompt(e.target.value)}
            placeholder="Example: Draft a non-disclosure agreement for a technology startup that will be sharing proprietary software algorithms with potential investors. Include standard confidentiality clauses and a 3-year term."
            className="w-full h-40 px-4 py-3 bg-input border border-border rounded-lg focus:ring-2 focus:ring-ring focus:border-transparent resize-none text-foreground placeholder:text-muted-foreground text-base leading-relaxed"
            disabled={isGenerating}
          />
          <div className="flex items-center justify-between mt-4">
            <p className="text-sm text-muted-foreground">Be as specific as possible for the best results</p>
            <span className="text-sm text-muted-foreground">{prompt.length}/1000</span>
          </div>
        </CardContent>
      </Card>

      <div className="text-center mb-8">
        <Button
          onClick={handleGenerate}
          disabled={!prompt.trim() || isGenerating}
          size="lg"
          className="bg-gradient-to-r from-primary to-accent hover:from-primary/90 hover:to-accent/90 text-primary-foreground font-semibold px-12 py-4 rounded-lg transition-all duration-200 hover:shadow-lg disabled:opacity-50 text-lg"
        >
          {isGenerating ? (
            <>
              <Loader2 className="w-5 h-5 mr-3 animate-spin" />
              Generating Document...
            </>
          ) : (
            <>
              <Sparkles className="w-5 h-5 mr-3" />
              Generate Legal Document
            </>
          )}
        </Button>
      </div>

      {/* Generated Legal Document Card */}
      {generatedDocument && (
        <Card className="mb-8 shadow-lg border-border">
          <CardHeader className="bg-card border-b border-border">
            <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
              <CardTitle className="font-serif text-xl text-foreground">Generated Legal Document</CardTitle>
              <div className="flex flex-wrap gap-2">
                <Button
                  size="sm"
                  onClick={handleSaveAndView}
                  className="bg-gradient-to-r from-primary to-accent hover:from-primary/90 hover:to-accent/90"
                >
                  <FileText className="w-4 h-4 mr-2" />
                  View in Library
                </Button>
                <div className="relative">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={handleCopyToClipboard}
                    className="flex items-center gap-2 border-border hover:bg-accent hover:text-accent-foreground transition-colors bg-transparent"
                  >
                    <Copy className="w-4 h-4" />
                    Copy All
                  </Button>
                  {showCopiedTooltip && (
                    <div className="absolute -top-10 left-1/2 transform -translate-x-1/2 bg-primary text-primary-foreground text-xs px-3 py-1 rounded-md shadow-lg z-10">
                      Copied to clipboard!
                    </div>
                  )}
                </div>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={handleDownloadPDF}
                  className="flex items-center gap-2 border-border hover:bg-accent hover:text-accent-foreground transition-colors bg-transparent"
                >
                  <File className="w-4 h-4" />
                  Download PDF
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={handleDownloadDocx}
                  className="flex items-center gap-2 border-border hover:bg-accent hover:text-accent-foreground transition-colors bg-transparent"
                >
                  <Download className="w-4 h-4" />
                  Download TXT
                </Button>
              </div>
            </div>
          </CardHeader>
          <CardContent className="p-6">
            <div className="max-h-[600px] overflow-y-auto">
              <pre className="whitespace-pre-wrap font-serif text-sm leading-relaxed text-card-foreground">
                {generatedDocument}
              </pre>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Important Legal Disclaimer Card */}
      {generatedDocument && (
        <Card className="bg-muted/30 border-border">
          <CardContent className="p-6">
            <div className="flex items-start gap-3">
              <Shield className="w-5 h-5 text-accent mt-0.5 flex-shrink-0" />
              <div>
                <h4 className="font-serif font-semibold text-foreground mb-2">Important Legal Disclaimer</h4>
                <p className="text-sm text-muted-foreground leading-relaxed">
                  <strong>
                    LegalGenie is an AI-powered document generation tool and does not provide legal advice.
                  </strong>
                  The documents generated are templates that may require customization for your specific situation.
                  Always consult with a qualified, licensed attorney before using any legal document for important
                  matters. LegalGenie and its operators are not responsible for any legal consequences arising from the
                  use of generated documents.
                </p>
              </div>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  )
}
